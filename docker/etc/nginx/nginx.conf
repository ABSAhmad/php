user www-data;
worker_processes auto;
pid /run/nginx.pid;

# loading modules needs to be an early bird
include /etc/nginx/mods-enabled/*.conf;

error_log   /var/log/nginx/error.log warn;

events {
    worker_connections  1024;
    multi_accept off;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile        on;

    server_names_hash_bucket_size 64;
    client_max_body_size 64m;

    # contains APM and monitoring relevant data
    # the format is very verbose, but easy to parse and analyse by tools
    # dedup of log data should be done while aggregating the data
    # those logs here are verbose for good human readability
    log_format  claranet
        'request_id=$request_id;request_protocol=$server_protocol;method=$request_method;status=$status;'
        'forwarded_for=$http_x_forwarded_for;forwarded_proto=$http_x_forwarded_proto;'
        'upstream_status=$upstream_status;upstream_addr=$upstream_addr;upstream_connect_time=$upstream_connect_time;upstream_header_time=$upstream_header_time;upstream_response_time=$upstream_response_time;'
        'request_time=$request_time;host=$host;request_length=$request_length;user_agent=$http_user_agent;content_type=$content_type;bytes_sent=$bytes_sent;request_uri=$request_uri';

    # if a request results in a status=200, just log a simple line
    log_format claranet_static
        '$request_id $request_method $server_protocol forwarded_for=$http_x_forwarded_for forwarded_proto=$http_x_forwarded_proto bytes=$bytes_sent gzip_ratio=$gzip_ratio $content_type $host/$request_uri';

    # don't log readinessProbes from kubernetes into the access.log
    # except if the $status isn't 200
    # create a key by combining user_agent and status
    map "$http_user_agent:$status" $useragent_loggable {
        default                           1;
        "k8s-cluster-readiness-check:200" 0;
    }

    log_subrequest on;
    access_log /var/log/nginx/access.log claranet if=$useragent_loggable;

    # we need this for the fcgi header
    map $http_x_forwarded_proto $http_scheme {
        default "http";
        https   "https";
    }

    tcp_nopush      on;
    tcp_nodelay     on;

    keepalive_requests 100;

    gzip  on;
    gzip_vary on;
    gzip_static on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/javascript;

    #
    #   F A S T C G I
    #

    fastcgi_index index.php;
    fastcgi_param  QUERY_STRING       $query_string;
    fastcgi_param  REQUEST_METHOD     $request_method;
    fastcgi_param  REQUEST_ID         $request_id;
    fastcgi_param  CONTENT_TYPE       $content_type;
    fastcgi_param  CONTENT_LENGTH     $content_length;

    fastcgi_param  SCRIPT_FILENAME    $document_root$uri;
    fastcgi_param  SCRIPT_NAME        $uri;
    fastcgi_param  PATH_INFO          $uri;
    fastcgi_param  REQUEST_URI        $request_uri;
    fastcgi_param  DOCUMENT_URI       $document_uri;
    fastcgi_param  DOCUMENT_ROOT      $document_root;
    fastcgi_param  SERVER_PROTOCOL    $server_protocol;
    fastcgi_param  REQUEST_SCHEME     http_x_forwarded_proto if_not_empty;
    fastcgi_param  HTTP_SCHEME        $http_scheme;

    fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
    fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;

    fastcgi_param  REMOTE_ADDR        $remote_addr;
    fastcgi_param  REMOTE_PORT        $remote_port;
    fastcgi_param  SERVER_ADDR        $server_addr;
    fastcgi_param  SERVER_PORT        $server_port;
    fastcgi_param  SERVER_NAME        $host;

    # PHP only, required if PHP was built with --enable-force-cgi-redirect
    fastcgi_param  REDIRECT_STATUS    200;

    # cache FS meta information
    open_file_cache                 max=20000 inactive=360m;
    open_file_cache_valid           360m;
    open_file_cache_min_uses        1;
    open_file_cache_errors          on;
    
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
